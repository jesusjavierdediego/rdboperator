// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: rdboperator.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecordSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []string `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"` // Each record is a JSOn string
}

func (x *RecordSet) Reset() {
	*x = RecordSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rdboperator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordSet) ProtoMessage() {}

func (x *RecordSet) ProtoReflect() protoreflect.Message {
	mi := &file_rdboperator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordSet.ProtoReflect.Descriptor instead.
func (*RecordSet) Descriptor() ([]byte, []int) {
	return file_rdboperator_proto_rawDescGZIP(), []int{0}
}

func (x *RecordSet) GetRecords() []string {
	if x != nil {
		return x.Records
	}
	return nil
}

type RDBQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseName   string `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	CollectionName string `protobuf:"bytes,3,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Query          string `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"` // the nosql query string
}

func (x *RDBQuery) Reset() {
	*x = RDBQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rdboperator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RDBQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RDBQuery) ProtoMessage() {}

func (x *RDBQuery) ProtoReflect() protoreflect.Message {
	mi := &file_rdboperator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RDBQuery.ProtoReflect.Descriptor instead.
func (*RDBQuery) Descriptor() ([]byte, []int) {
	return file_rdboperator_proto_rawDescGZIP(), []int{1}
}

func (x *RDBQuery) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *RDBQuery) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *RDBQuery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rdboperator_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_rdboperator_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_rdboperator_proto_rawDescGZIP(), []int{2}
}

var File_rdboperator_proto protoreflect.FileDescriptor

var file_rdboperator_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x64, 0x62, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x10, 0x72, 0x64, 0x62, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x6e, 0x0a, 0x08,
	0x52, 0x44, 0x42, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x07, 0x0a, 0x05,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x60, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x52, 0x44, 0x42, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x2e, 0x72,
	0x64, 0x62, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x44, 0x42, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1b, 0x2e, 0x72, 0x64, 0x62, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x22, 0x00, 0x42, 0x0e, 0x48, 0x01, 0x5a, 0x0a, 0x2e, 0x3b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rdboperator_proto_rawDescOnce sync.Once
	file_rdboperator_proto_rawDescData = file_rdboperator_proto_rawDesc
)

func file_rdboperator_proto_rawDescGZIP() []byte {
	file_rdboperator_proto_rawDescOnce.Do(func() {
		file_rdboperator_proto_rawDescData = protoimpl.X.CompressGZIP(file_rdboperator_proto_rawDescData)
	})
	return file_rdboperator_proto_rawDescData
}

var file_rdboperator_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_rdboperator_proto_goTypes = []interface{}{
	(*RecordSet)(nil), // 0: rdboperatorproto.RecordSet
	(*RDBQuery)(nil),  // 1: rdboperatorproto.RDBQuery
	(*Empty)(nil),     // 2: rdboperatorproto.Empty
}
var file_rdboperator_proto_depIdxs = []int32{
	1, // 0: rdboperatorproto.RecordQueryService.GetRDBRecords:input_type -> rdboperatorproto.RDBQuery
	0, // 1: rdboperatorproto.RecordQueryService.GetRDBRecords:output_type -> rdboperatorproto.RecordSet
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_rdboperator_proto_init() }
func file_rdboperator_proto_init() {
	if File_rdboperator_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rdboperator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rdboperator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RDBQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rdboperator_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rdboperator_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rdboperator_proto_goTypes,
		DependencyIndexes: file_rdboperator_proto_depIdxs,
		MessageInfos:      file_rdboperator_proto_msgTypes,
	}.Build()
	File_rdboperator_proto = out.File
	file_rdboperator_proto_rawDesc = nil
	file_rdboperator_proto_goTypes = nil
	file_rdboperator_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RecordQueryServiceClient is the client API for RecordQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecordQueryServiceClient interface {
	GetRDBRecords(ctx context.Context, in *RDBQuery, opts ...grpc.CallOption) (*RecordSet, error)
}

type recordQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordQueryServiceClient(cc grpc.ClientConnInterface) RecordQueryServiceClient {
	return &recordQueryServiceClient{cc}
}

func (c *recordQueryServiceClient) GetRDBRecords(ctx context.Context, in *RDBQuery, opts ...grpc.CallOption) (*RecordSet, error) {
	out := new(RecordSet)
	err := c.cc.Invoke(ctx, "/rdboperatorproto.RecordQueryService/GetRDBRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordQueryServiceServer is the server API for RecordQueryService service.
type RecordQueryServiceServer interface {
	GetRDBRecords(context.Context, *RDBQuery) (*RecordSet, error)
}

// UnimplementedRecordQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRecordQueryServiceServer struct {
}

func (*UnimplementedRecordQueryServiceServer) GetRDBRecords(context.Context, *RDBQuery) (*RecordSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRDBRecords not implemented")
}

func RegisterRecordQueryServiceServer(s *grpc.Server, srv RecordQueryServiceServer) {
	s.RegisterService(&_RecordQueryService_serviceDesc, srv)
}

func _RecordQueryService_GetRDBRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RDBQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordQueryServiceServer).GetRDBRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdboperatorproto.RecordQueryService/GetRDBRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordQueryServiceServer).GetRDBRecords(ctx, req.(*RDBQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecordQueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rdboperatorproto.RecordQueryService",
	HandlerType: (*RecordQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRDBRecords",
			Handler:    _RecordQueryService_GetRDBRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rdboperator.proto",
}
